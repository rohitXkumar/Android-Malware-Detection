#!/usr/bin/env python
# coding: utf-8

# In[ ]:


import numpy as np
import pandas as pd
import librosa
import librosa.display
import matplotlib.pyplot as plt

# Function to decode hexadecimal string into raw audio signal
def hex_to_audio(hex_string):
    # Decode hexadecimal string into bytes
    audio_bytes = bytes.fromhex(hex_string)
    # Convert bytes into numpy array of integers
    audio_array = np.frombuffer(audio_bytes, dtype=np.int16)
    # Convert integer array to floating-point and normalize to the range [-1, 1]
    audio_array = audio_array.astype(np.float32) / np.iinfo(np.int16).max
    return audio_array

# Function to convert audio signal into Mel spectrogram
def audio_to_mel_spectrogram(audio_signal, sample_rate):
    # Convert audio signal to Mel spectrogram
    mel_spectrogram = librosa.feature.melspectrogram(y=audio_signal, sr=sample_rate)
    return mel_spectrogram

# Read CSV file containing hexadecimal audio data
csv_file = 'D:/Benign_4042_apk/Benign_4042_2.csv'
data = pd.read_csv(csv_file)

# Sample rate of the audio signal (can be adjusted based on your data)
sample_rate = 44100

# Spectrogram dimensions
spectrogram_height = 300
spectrogram_width = 300

# Iterate over each row in the CSV file
for index, row in data.iterrows():
    # Extract hexadecimal audio data from the current row
    hex_audio_data = row['hexes']
    
    # Decode hexadecimal data into raw audio signal
    audio_signal = hex_to_audio(hex_audio_data)
    
    # Convert audio signal into Mel spectrogram
    mel_spectrogram = audio_to_mel_spectrogram(audio_signal, sample_rate)
    
    # Plot Mel spectrogram
    plt.figure(figsize=(spectrogram_width / 100, spectrogram_height / 100), dpi=100)  # Set figure size based on pixels
    librosa.display.specshow(librosa.power_to_db(mel_spectrogram, ref=np.max), sr=sample_rate, hop_length=512, x_axis='time', y_axis='mel')
    #plt.title(f'Mel Spectrogram - Row {index+1}')
    #plt.tight_layout()
    
    # Remove axes
    plt.axis('off')
    
    # Extract filename from CSV
    filename = row['file_name']  # Adjust the column name as per your CSV
    
    # Save figure with the name of the original file
    plt.savefig(f'{filename}_spectrogram.png', bbox_inches='tight', pad_inches=0, dpi=100)  # Save with dpi to maintain dimensions
    
    plt.close()  # Close the current figure to release memory












